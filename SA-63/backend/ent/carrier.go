// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/SrtStory/app/ent/carrier"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Carrier is the model entity for the Carrier schema.
type Carrier struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CarrierQuery when eager-loading is set.
	Edges CarrierEdges `json:"edges"`
}

// CarrierEdges holds the relations/edges for other nodes in the graph.
type CarrierEdges struct {
	// Statistic holds the value of the statistic edge.
	Statistic []*Statistic
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// StatisticOrErr returns the Statistic value or an error if the edge
// was not loaded in eager-loading.
func (e CarrierEdges) StatisticOrErr() ([]*Statistic, error) {
	if e.loadedTypes[0] {
		return e.Statistic, nil
	}
	return nil, &NotLoadedError{edge: "statistic"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Carrier) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // Name
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Carrier fields.
func (c *Carrier) assignValues(values ...interface{}) error {
	if m, n := len(values), len(carrier.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	c.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Name", values[0])
	} else if value.Valid {
		c.Name = value.String
	}
	return nil
}

// QueryStatistic queries the statistic edge of the Carrier.
func (c *Carrier) QueryStatistic() *StatisticQuery {
	return (&CarrierClient{config: c.config}).QueryStatistic(c)
}

// Update returns a builder for updating this Carrier.
// Note that, you need to call Carrier.Unwrap() before calling this method, if this Carrier
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Carrier) Update() *CarrierUpdateOne {
	return (&CarrierClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (c *Carrier) Unwrap() *Carrier {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Carrier is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Carrier) String() string {
	var builder strings.Builder
	builder.WriteString("Carrier(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", Name=")
	builder.WriteString(c.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Carriers is a parsable slice of Carrier.
type Carriers []*Carrier

func (c Carriers) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
