// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/SrtStory/app/ent/area"
	"github.com/SrtStory/app/ent/carrier"
	"github.com/SrtStory/app/ent/contagious"
	"github.com/SrtStory/app/ent/employee"
	"github.com/SrtStory/app/ent/patient"
	"github.com/SrtStory/app/ent/statistic"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Statistic is the model entity for the Statistic schema.
type Statistic struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StatisticQuery when eager-loading is set.
	Edges                StatisticEdges `json:"edges"`
	area_statistic       *int
	carrier_statistic    *int
	contagious_statistic *int
	employee_statistic   *int
	patient_statistic    *int
}

// StatisticEdges holds the relations/edges for other nodes in the graph.
type StatisticEdges struct {
	// Employee holds the value of the employee edge.
	Employee *Employee
	// Contagious holds the value of the contagious edge.
	Contagious *Contagious
	// Carrier holds the value of the carrier edge.
	Carrier *Carrier
	// Patient holds the value of the patient edge.
	Patient *Patient
	// Area holds the value of the area edge.
	Area *Area
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// EmployeeOrErr returns the Employee value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StatisticEdges) EmployeeOrErr() (*Employee, error) {
	if e.loadedTypes[0] {
		if e.Employee == nil {
			// The edge employee was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: employee.Label}
		}
		return e.Employee, nil
	}
	return nil, &NotLoadedError{edge: "employee"}
}

// ContagiousOrErr returns the Contagious value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StatisticEdges) ContagiousOrErr() (*Contagious, error) {
	if e.loadedTypes[1] {
		if e.Contagious == nil {
			// The edge contagious was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: contagious.Label}
		}
		return e.Contagious, nil
	}
	return nil, &NotLoadedError{edge: "contagious"}
}

// CarrierOrErr returns the Carrier value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StatisticEdges) CarrierOrErr() (*Carrier, error) {
	if e.loadedTypes[2] {
		if e.Carrier == nil {
			// The edge carrier was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: carrier.Label}
		}
		return e.Carrier, nil
	}
	return nil, &NotLoadedError{edge: "carrier"}
}

// PatientOrErr returns the Patient value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StatisticEdges) PatientOrErr() (*Patient, error) {
	if e.loadedTypes[3] {
		if e.Patient == nil {
			// The edge patient was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: patient.Label}
		}
		return e.Patient, nil
	}
	return nil, &NotLoadedError{edge: "patient"}
}

// AreaOrErr returns the Area value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StatisticEdges) AreaOrErr() (*Area, error) {
	if e.loadedTypes[4] {
		if e.Area == nil {
			// The edge area was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: area.Label}
		}
		return e.Area, nil
	}
	return nil, &NotLoadedError{edge: "area"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Statistic) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Statistic) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // area_statistic
		&sql.NullInt64{}, // carrier_statistic
		&sql.NullInt64{}, // contagious_statistic
		&sql.NullInt64{}, // employee_statistic
		&sql.NullInt64{}, // patient_statistic
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Statistic fields.
func (s *Statistic) assignValues(values ...interface{}) error {
	if m, n := len(values), len(statistic.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	s.ID = int(value.Int64)
	values = values[1:]
	values = values[0:]
	if len(values) == len(statistic.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field area_statistic", value)
		} else if value.Valid {
			s.area_statistic = new(int)
			*s.area_statistic = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field carrier_statistic", value)
		} else if value.Valid {
			s.carrier_statistic = new(int)
			*s.carrier_statistic = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field contagious_statistic", value)
		} else if value.Valid {
			s.contagious_statistic = new(int)
			*s.contagious_statistic = int(value.Int64)
		}
		if value, ok := values[3].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field employee_statistic", value)
		} else if value.Valid {
			s.employee_statistic = new(int)
			*s.employee_statistic = int(value.Int64)
		}
		if value, ok := values[4].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field patient_statistic", value)
		} else if value.Valid {
			s.patient_statistic = new(int)
			*s.patient_statistic = int(value.Int64)
		}
	}
	return nil
}

// QueryEmployee queries the employee edge of the Statistic.
func (s *Statistic) QueryEmployee() *EmployeeQuery {
	return (&StatisticClient{config: s.config}).QueryEmployee(s)
}

// QueryContagious queries the contagious edge of the Statistic.
func (s *Statistic) QueryContagious() *ContagiousQuery {
	return (&StatisticClient{config: s.config}).QueryContagious(s)
}

// QueryCarrier queries the carrier edge of the Statistic.
func (s *Statistic) QueryCarrier() *CarrierQuery {
	return (&StatisticClient{config: s.config}).QueryCarrier(s)
}

// QueryPatient queries the patient edge of the Statistic.
func (s *Statistic) QueryPatient() *PatientQuery {
	return (&StatisticClient{config: s.config}).QueryPatient(s)
}

// QueryArea queries the area edge of the Statistic.
func (s *Statistic) QueryArea() *AreaQuery {
	return (&StatisticClient{config: s.config}).QueryArea(s)
}

// Update returns a builder for updating this Statistic.
// Note that, you need to call Statistic.Unwrap() before calling this method, if this Statistic
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Statistic) Update() *StatisticUpdateOne {
	return (&StatisticClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (s *Statistic) Unwrap() *Statistic {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Statistic is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Statistic) String() string {
	var builder strings.Builder
	builder.WriteString("Statistic(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteByte(')')
	return builder.String()
}

// Statistics is a parsable slice of Statistic.
type Statistics []*Statistic

func (s Statistics) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
