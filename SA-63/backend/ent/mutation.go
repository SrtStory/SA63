// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/SrtStory/app/ent/area"
	"github.com/SrtStory/app/ent/carrier"
	"github.com/SrtStory/app/ent/contagious"
	"github.com/SrtStory/app/ent/employee"
	"github.com/SrtStory/app/ent/patient"
	"github.com/SrtStory/app/ent/statistic"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeArea       = "Area"
	TypeCarrier    = "Carrier"
	TypeContagious = "Contagious"
	TypeEmployee   = "Employee"
	TypePatient    = "Patient"
	TypeStatistic  = "Statistic"
)

// AreaMutation represents an operation that mutate the Areas
// nodes in the graph.
type AreaMutation struct {
	config
	op               Op
	typ              string
	id               *int
	_Name            *string
	clearedFields    map[string]struct{}
	statistic        map[int]struct{}
	removedstatistic map[int]struct{}
	done             bool
	oldValue         func(context.Context) (*Area, error)
}

var _ ent.Mutation = (*AreaMutation)(nil)

// areaOption allows to manage the mutation configuration using functional options.
type areaOption func(*AreaMutation)

// newAreaMutation creates new mutation for $n.Name.
func newAreaMutation(c config, op Op, opts ...areaOption) *AreaMutation {
	m := &AreaMutation{
		config:        c,
		op:            op,
		typ:           TypeArea,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAreaID sets the id field of the mutation.
func withAreaID(id int) areaOption {
	return func(m *AreaMutation) {
		var (
			err   error
			once  sync.Once
			value *Area
		)
		m.oldValue = func(ctx context.Context) (*Area, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Area.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withArea sets the old Area of the mutation.
func withArea(node *Area) areaOption {
	return func(m *AreaMutation) {
		m.oldValue = func(context.Context) (*Area, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AreaMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AreaMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *AreaMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the Name field.
func (m *AreaMutation) SetName(s string) {
	m._Name = &s
}

// Name returns the Name value in the mutation.
func (m *AreaMutation) Name() (r string, exists bool) {
	v := m._Name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old Name value of the Area.
// If the Area object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *AreaMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "Name" field.
func (m *AreaMutation) ResetName() {
	m._Name = nil
}

// AddStatisticIDs adds the statistic edge to Statistic by ids.
func (m *AreaMutation) AddStatisticIDs(ids ...int) {
	if m.statistic == nil {
		m.statistic = make(map[int]struct{})
	}
	for i := range ids {
		m.statistic[ids[i]] = struct{}{}
	}
}

// RemoveStatisticIDs removes the statistic edge to Statistic by ids.
func (m *AreaMutation) RemoveStatisticIDs(ids ...int) {
	if m.removedstatistic == nil {
		m.removedstatistic = make(map[int]struct{})
	}
	for i := range ids {
		m.removedstatistic[ids[i]] = struct{}{}
	}
}

// RemovedStatistic returns the removed ids of statistic.
func (m *AreaMutation) RemovedStatisticIDs() (ids []int) {
	for id := range m.removedstatistic {
		ids = append(ids, id)
	}
	return
}

// StatisticIDs returns the statistic ids in the mutation.
func (m *AreaMutation) StatisticIDs() (ids []int) {
	for id := range m.statistic {
		ids = append(ids, id)
	}
	return
}

// ResetStatistic reset all changes of the "statistic" edge.
func (m *AreaMutation) ResetStatistic() {
	m.statistic = nil
	m.removedstatistic = nil
}

// Op returns the operation name.
func (m *AreaMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Area).
func (m *AreaMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *AreaMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Name != nil {
		fields = append(fields, area.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *AreaMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case area.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *AreaMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case area.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Area field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *AreaMutation) SetField(name string, value ent.Value) error {
	switch name {
	case area.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Area field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *AreaMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *AreaMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *AreaMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Area numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *AreaMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *AreaMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *AreaMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Area nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *AreaMutation) ResetField(name string) error {
	switch name {
	case area.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Area field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *AreaMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.statistic != nil {
		edges = append(edges, area.EdgeStatistic)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *AreaMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case area.EdgeStatistic:
		ids := make([]ent.Value, 0, len(m.statistic))
		for id := range m.statistic {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *AreaMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedstatistic != nil {
		edges = append(edges, area.EdgeStatistic)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *AreaMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case area.EdgeStatistic:
		ids := make([]ent.Value, 0, len(m.removedstatistic))
		for id := range m.removedstatistic {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *AreaMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *AreaMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *AreaMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Area unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *AreaMutation) ResetEdge(name string) error {
	switch name {
	case area.EdgeStatistic:
		m.ResetStatistic()
		return nil
	}
	return fmt.Errorf("unknown Area edge %s", name)
}

// CarrierMutation represents an operation that mutate the Carriers
// nodes in the graph.
type CarrierMutation struct {
	config
	op               Op
	typ              string
	id               *int
	_Name            *string
	clearedFields    map[string]struct{}
	statistic        map[int]struct{}
	removedstatistic map[int]struct{}
	done             bool
	oldValue         func(context.Context) (*Carrier, error)
}

var _ ent.Mutation = (*CarrierMutation)(nil)

// carrierOption allows to manage the mutation configuration using functional options.
type carrierOption func(*CarrierMutation)

// newCarrierMutation creates new mutation for $n.Name.
func newCarrierMutation(c config, op Op, opts ...carrierOption) *CarrierMutation {
	m := &CarrierMutation{
		config:        c,
		op:            op,
		typ:           TypeCarrier,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCarrierID sets the id field of the mutation.
func withCarrierID(id int) carrierOption {
	return func(m *CarrierMutation) {
		var (
			err   error
			once  sync.Once
			value *Carrier
		)
		m.oldValue = func(ctx context.Context) (*Carrier, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Carrier.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCarrier sets the old Carrier of the mutation.
func withCarrier(node *Carrier) carrierOption {
	return func(m *CarrierMutation) {
		m.oldValue = func(context.Context) (*Carrier, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CarrierMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CarrierMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *CarrierMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the Name field.
func (m *CarrierMutation) SetName(s string) {
	m._Name = &s
}

// Name returns the Name value in the mutation.
func (m *CarrierMutation) Name() (r string, exists bool) {
	v := m._Name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old Name value of the Carrier.
// If the Carrier object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *CarrierMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "Name" field.
func (m *CarrierMutation) ResetName() {
	m._Name = nil
}

// AddStatisticIDs adds the statistic edge to Statistic by ids.
func (m *CarrierMutation) AddStatisticIDs(ids ...int) {
	if m.statistic == nil {
		m.statistic = make(map[int]struct{})
	}
	for i := range ids {
		m.statistic[ids[i]] = struct{}{}
	}
}

// RemoveStatisticIDs removes the statistic edge to Statistic by ids.
func (m *CarrierMutation) RemoveStatisticIDs(ids ...int) {
	if m.removedstatistic == nil {
		m.removedstatistic = make(map[int]struct{})
	}
	for i := range ids {
		m.removedstatistic[ids[i]] = struct{}{}
	}
}

// RemovedStatistic returns the removed ids of statistic.
func (m *CarrierMutation) RemovedStatisticIDs() (ids []int) {
	for id := range m.removedstatistic {
		ids = append(ids, id)
	}
	return
}

// StatisticIDs returns the statistic ids in the mutation.
func (m *CarrierMutation) StatisticIDs() (ids []int) {
	for id := range m.statistic {
		ids = append(ids, id)
	}
	return
}

// ResetStatistic reset all changes of the "statistic" edge.
func (m *CarrierMutation) ResetStatistic() {
	m.statistic = nil
	m.removedstatistic = nil
}

// Op returns the operation name.
func (m *CarrierMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Carrier).
func (m *CarrierMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *CarrierMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Name != nil {
		fields = append(fields, carrier.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *CarrierMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case carrier.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *CarrierMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case carrier.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Carrier field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *CarrierMutation) SetField(name string, value ent.Value) error {
	switch name {
	case carrier.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Carrier field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *CarrierMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *CarrierMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *CarrierMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Carrier numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *CarrierMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *CarrierMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *CarrierMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Carrier nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *CarrierMutation) ResetField(name string) error {
	switch name {
	case carrier.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Carrier field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *CarrierMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.statistic != nil {
		edges = append(edges, carrier.EdgeStatistic)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *CarrierMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case carrier.EdgeStatistic:
		ids := make([]ent.Value, 0, len(m.statistic))
		for id := range m.statistic {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *CarrierMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedstatistic != nil {
		edges = append(edges, carrier.EdgeStatistic)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *CarrierMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case carrier.EdgeStatistic:
		ids := make([]ent.Value, 0, len(m.removedstatistic))
		for id := range m.removedstatistic {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *CarrierMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *CarrierMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *CarrierMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Carrier unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *CarrierMutation) ResetEdge(name string) error {
	switch name {
	case carrier.EdgeStatistic:
		m.ResetStatistic()
		return nil
	}
	return fmt.Errorf("unknown Carrier edge %s", name)
}

// ContagiousMutation represents an operation that mutate the ContagiousSlice
// nodes in the graph.
type ContagiousMutation struct {
	config
	op               Op
	typ              string
	id               *int
	_Name            *string
	clearedFields    map[string]struct{}
	statistic        map[int]struct{}
	removedstatistic map[int]struct{}
	done             bool
	oldValue         func(context.Context) (*Contagious, error)
}

var _ ent.Mutation = (*ContagiousMutation)(nil)

// contagiousOption allows to manage the mutation configuration using functional options.
type contagiousOption func(*ContagiousMutation)

// newContagiousMutation creates new mutation for $n.Name.
func newContagiousMutation(c config, op Op, opts ...contagiousOption) *ContagiousMutation {
	m := &ContagiousMutation{
		config:        c,
		op:            op,
		typ:           TypeContagious,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withContagiousID sets the id field of the mutation.
func withContagiousID(id int) contagiousOption {
	return func(m *ContagiousMutation) {
		var (
			err   error
			once  sync.Once
			value *Contagious
		)
		m.oldValue = func(ctx context.Context) (*Contagious, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Contagious.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withContagious sets the old Contagious of the mutation.
func withContagious(node *Contagious) contagiousOption {
	return func(m *ContagiousMutation) {
		m.oldValue = func(context.Context) (*Contagious, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ContagiousMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ContagiousMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *ContagiousMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the Name field.
func (m *ContagiousMutation) SetName(s string) {
	m._Name = &s
}

// Name returns the Name value in the mutation.
func (m *ContagiousMutation) Name() (r string, exists bool) {
	v := m._Name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old Name value of the Contagious.
// If the Contagious object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ContagiousMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "Name" field.
func (m *ContagiousMutation) ResetName() {
	m._Name = nil
}

// AddStatisticIDs adds the statistic edge to Statistic by ids.
func (m *ContagiousMutation) AddStatisticIDs(ids ...int) {
	if m.statistic == nil {
		m.statistic = make(map[int]struct{})
	}
	for i := range ids {
		m.statistic[ids[i]] = struct{}{}
	}
}

// RemoveStatisticIDs removes the statistic edge to Statistic by ids.
func (m *ContagiousMutation) RemoveStatisticIDs(ids ...int) {
	if m.removedstatistic == nil {
		m.removedstatistic = make(map[int]struct{})
	}
	for i := range ids {
		m.removedstatistic[ids[i]] = struct{}{}
	}
}

// RemovedStatistic returns the removed ids of statistic.
func (m *ContagiousMutation) RemovedStatisticIDs() (ids []int) {
	for id := range m.removedstatistic {
		ids = append(ids, id)
	}
	return
}

// StatisticIDs returns the statistic ids in the mutation.
func (m *ContagiousMutation) StatisticIDs() (ids []int) {
	for id := range m.statistic {
		ids = append(ids, id)
	}
	return
}

// ResetStatistic reset all changes of the "statistic" edge.
func (m *ContagiousMutation) ResetStatistic() {
	m.statistic = nil
	m.removedstatistic = nil
}

// Op returns the operation name.
func (m *ContagiousMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Contagious).
func (m *ContagiousMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *ContagiousMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Name != nil {
		fields = append(fields, contagious.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *ContagiousMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case contagious.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *ContagiousMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case contagious.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Contagious field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ContagiousMutation) SetField(name string, value ent.Value) error {
	switch name {
	case contagious.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Contagious field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *ContagiousMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *ContagiousMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ContagiousMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Contagious numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *ContagiousMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *ContagiousMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *ContagiousMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Contagious nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *ContagiousMutation) ResetField(name string) error {
	switch name {
	case contagious.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Contagious field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *ContagiousMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.statistic != nil {
		edges = append(edges, contagious.EdgeStatistic)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *ContagiousMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case contagious.EdgeStatistic:
		ids := make([]ent.Value, 0, len(m.statistic))
		for id := range m.statistic {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *ContagiousMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedstatistic != nil {
		edges = append(edges, contagious.EdgeStatistic)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *ContagiousMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case contagious.EdgeStatistic:
		ids := make([]ent.Value, 0, len(m.removedstatistic))
		for id := range m.removedstatistic {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *ContagiousMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *ContagiousMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *ContagiousMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Contagious unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *ContagiousMutation) ResetEdge(name string) error {
	switch name {
	case contagious.EdgeStatistic:
		m.ResetStatistic()
		return nil
	}
	return fmt.Errorf("unknown Contagious edge %s", name)
}

// EmployeeMutation represents an operation that mutate the Employees
// nodes in the graph.
type EmployeeMutation struct {
	config
	op               Op
	typ              string
	id               *int
	_Email           *string
	_Name            *string
	_User_id         *string
	clearedFields    map[string]struct{}
	statistic        map[int]struct{}
	removedstatistic map[int]struct{}
	done             bool
	oldValue         func(context.Context) (*Employee, error)
}

var _ ent.Mutation = (*EmployeeMutation)(nil)

// employeeOption allows to manage the mutation configuration using functional options.
type employeeOption func(*EmployeeMutation)

// newEmployeeMutation creates new mutation for $n.Name.
func newEmployeeMutation(c config, op Op, opts ...employeeOption) *EmployeeMutation {
	m := &EmployeeMutation{
		config:        c,
		op:            op,
		typ:           TypeEmployee,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEmployeeID sets the id field of the mutation.
func withEmployeeID(id int) employeeOption {
	return func(m *EmployeeMutation) {
		var (
			err   error
			once  sync.Once
			value *Employee
		)
		m.oldValue = func(ctx context.Context) (*Employee, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Employee.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEmployee sets the old Employee of the mutation.
func withEmployee(node *Employee) employeeOption {
	return func(m *EmployeeMutation) {
		m.oldValue = func(context.Context) (*Employee, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EmployeeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EmployeeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *EmployeeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetEmail sets the Email field.
func (m *EmployeeMutation) SetEmail(s string) {
	m._Email = &s
}

// Email returns the Email value in the mutation.
func (m *EmployeeMutation) Email() (r string, exists bool) {
	v := m._Email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old Email value of the Employee.
// If the Employee object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *EmployeeMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmail is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail reset all changes of the "Email" field.
func (m *EmployeeMutation) ResetEmail() {
	m._Email = nil
}

// SetName sets the Name field.
func (m *EmployeeMutation) SetName(s string) {
	m._Name = &s
}

// Name returns the Name value in the mutation.
func (m *EmployeeMutation) Name() (r string, exists bool) {
	v := m._Name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old Name value of the Employee.
// If the Employee object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *EmployeeMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "Name" field.
func (m *EmployeeMutation) ResetName() {
	m._Name = nil
}

// SetUserID sets the User_id field.
func (m *EmployeeMutation) SetUserID(s string) {
	m._User_id = &s
}

// UserID returns the User_id value in the mutation.
func (m *EmployeeMutation) UserID() (r string, exists bool) {
	v := m._User_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old User_id value of the Employee.
// If the Employee object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *EmployeeMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserID is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID reset all changes of the "User_id" field.
func (m *EmployeeMutation) ResetUserID() {
	m._User_id = nil
}

// AddStatisticIDs adds the statistic edge to Statistic by ids.
func (m *EmployeeMutation) AddStatisticIDs(ids ...int) {
	if m.statistic == nil {
		m.statistic = make(map[int]struct{})
	}
	for i := range ids {
		m.statistic[ids[i]] = struct{}{}
	}
}

// RemoveStatisticIDs removes the statistic edge to Statistic by ids.
func (m *EmployeeMutation) RemoveStatisticIDs(ids ...int) {
	if m.removedstatistic == nil {
		m.removedstatistic = make(map[int]struct{})
	}
	for i := range ids {
		m.removedstatistic[ids[i]] = struct{}{}
	}
}

// RemovedStatistic returns the removed ids of statistic.
func (m *EmployeeMutation) RemovedStatisticIDs() (ids []int) {
	for id := range m.removedstatistic {
		ids = append(ids, id)
	}
	return
}

// StatisticIDs returns the statistic ids in the mutation.
func (m *EmployeeMutation) StatisticIDs() (ids []int) {
	for id := range m.statistic {
		ids = append(ids, id)
	}
	return
}

// ResetStatistic reset all changes of the "statistic" edge.
func (m *EmployeeMutation) ResetStatistic() {
	m.statistic = nil
	m.removedstatistic = nil
}

// Op returns the operation name.
func (m *EmployeeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Employee).
func (m *EmployeeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *EmployeeMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m._Email != nil {
		fields = append(fields, employee.FieldEmail)
	}
	if m._Name != nil {
		fields = append(fields, employee.FieldName)
	}
	if m._User_id != nil {
		fields = append(fields, employee.FieldUserID)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *EmployeeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case employee.FieldEmail:
		return m.Email()
	case employee.FieldName:
		return m.Name()
	case employee.FieldUserID:
		return m.UserID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *EmployeeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case employee.FieldEmail:
		return m.OldEmail(ctx)
	case employee.FieldName:
		return m.OldName(ctx)
	case employee.FieldUserID:
		return m.OldUserID(ctx)
	}
	return nil, fmt.Errorf("unknown Employee field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *EmployeeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case employee.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case employee.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case employee.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	}
	return fmt.Errorf("unknown Employee field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *EmployeeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *EmployeeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *EmployeeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Employee numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *EmployeeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *EmployeeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *EmployeeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Employee nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *EmployeeMutation) ResetField(name string) error {
	switch name {
	case employee.FieldEmail:
		m.ResetEmail()
		return nil
	case employee.FieldName:
		m.ResetName()
		return nil
	case employee.FieldUserID:
		m.ResetUserID()
		return nil
	}
	return fmt.Errorf("unknown Employee field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *EmployeeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.statistic != nil {
		edges = append(edges, employee.EdgeStatistic)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *EmployeeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case employee.EdgeStatistic:
		ids := make([]ent.Value, 0, len(m.statistic))
		for id := range m.statistic {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *EmployeeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedstatistic != nil {
		edges = append(edges, employee.EdgeStatistic)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *EmployeeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case employee.EdgeStatistic:
		ids := make([]ent.Value, 0, len(m.removedstatistic))
		for id := range m.removedstatistic {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *EmployeeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *EmployeeMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *EmployeeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Employee unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *EmployeeMutation) ResetEdge(name string) error {
	switch name {
	case employee.EdgeStatistic:
		m.ResetStatistic()
		return nil
	}
	return fmt.Errorf("unknown Employee edge %s", name)
}

// PatientMutation represents an operation that mutate the Patients
// nodes in the graph.
type PatientMutation struct {
	config
	op               Op
	typ              string
	id               *int
	_Gender          *string
	clearedFields    map[string]struct{}
	statistic        map[int]struct{}
	removedstatistic map[int]struct{}
	done             bool
	oldValue         func(context.Context) (*Patient, error)
}

var _ ent.Mutation = (*PatientMutation)(nil)

// patientOption allows to manage the mutation configuration using functional options.
type patientOption func(*PatientMutation)

// newPatientMutation creates new mutation for $n.Name.
func newPatientMutation(c config, op Op, opts ...patientOption) *PatientMutation {
	m := &PatientMutation{
		config:        c,
		op:            op,
		typ:           TypePatient,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPatientID sets the id field of the mutation.
func withPatientID(id int) patientOption {
	return func(m *PatientMutation) {
		var (
			err   error
			once  sync.Once
			value *Patient
		)
		m.oldValue = func(ctx context.Context) (*Patient, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Patient.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPatient sets the old Patient of the mutation.
func withPatient(node *Patient) patientOption {
	return func(m *PatientMutation) {
		m.oldValue = func(context.Context) (*Patient, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PatientMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PatientMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *PatientMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetGender sets the Gender field.
func (m *PatientMutation) SetGender(s string) {
	m._Gender = &s
}

// Gender returns the Gender value in the mutation.
func (m *PatientMutation) Gender() (r string, exists bool) {
	v := m._Gender
	if v == nil {
		return
	}
	return *v, true
}

// OldGender returns the old Gender value of the Patient.
// If the Patient object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *PatientMutation) OldGender(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldGender is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldGender requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGender: %w", err)
	}
	return oldValue.Gender, nil
}

// ResetGender reset all changes of the "Gender" field.
func (m *PatientMutation) ResetGender() {
	m._Gender = nil
}

// AddStatisticIDs adds the statistic edge to Statistic by ids.
func (m *PatientMutation) AddStatisticIDs(ids ...int) {
	if m.statistic == nil {
		m.statistic = make(map[int]struct{})
	}
	for i := range ids {
		m.statistic[ids[i]] = struct{}{}
	}
}

// RemoveStatisticIDs removes the statistic edge to Statistic by ids.
func (m *PatientMutation) RemoveStatisticIDs(ids ...int) {
	if m.removedstatistic == nil {
		m.removedstatistic = make(map[int]struct{})
	}
	for i := range ids {
		m.removedstatistic[ids[i]] = struct{}{}
	}
}

// RemovedStatistic returns the removed ids of statistic.
func (m *PatientMutation) RemovedStatisticIDs() (ids []int) {
	for id := range m.removedstatistic {
		ids = append(ids, id)
	}
	return
}

// StatisticIDs returns the statistic ids in the mutation.
func (m *PatientMutation) StatisticIDs() (ids []int) {
	for id := range m.statistic {
		ids = append(ids, id)
	}
	return
}

// ResetStatistic reset all changes of the "statistic" edge.
func (m *PatientMutation) ResetStatistic() {
	m.statistic = nil
	m.removedstatistic = nil
}

// Op returns the operation name.
func (m *PatientMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Patient).
func (m *PatientMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *PatientMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Gender != nil {
		fields = append(fields, patient.FieldGender)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *PatientMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case patient.FieldGender:
		return m.Gender()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *PatientMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case patient.FieldGender:
		return m.OldGender(ctx)
	}
	return nil, fmt.Errorf("unknown Patient field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PatientMutation) SetField(name string, value ent.Value) error {
	switch name {
	case patient.FieldGender:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGender(v)
		return nil
	}
	return fmt.Errorf("unknown Patient field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *PatientMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *PatientMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *PatientMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Patient numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *PatientMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *PatientMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *PatientMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Patient nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *PatientMutation) ResetField(name string) error {
	switch name {
	case patient.FieldGender:
		m.ResetGender()
		return nil
	}
	return fmt.Errorf("unknown Patient field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *PatientMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.statistic != nil {
		edges = append(edges, patient.EdgeStatistic)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *PatientMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case patient.EdgeStatistic:
		ids := make([]ent.Value, 0, len(m.statistic))
		for id := range m.statistic {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *PatientMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedstatistic != nil {
		edges = append(edges, patient.EdgeStatistic)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *PatientMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case patient.EdgeStatistic:
		ids := make([]ent.Value, 0, len(m.removedstatistic))
		for id := range m.removedstatistic {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *PatientMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *PatientMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *PatientMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Patient unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *PatientMutation) ResetEdge(name string) error {
	switch name {
	case patient.EdgeStatistic:
		m.ResetStatistic()
		return nil
	}
	return fmt.Errorf("unknown Patient edge %s", name)
}

// StatisticMutation represents an operation that mutate the Statistics
// nodes in the graph.
type StatisticMutation struct {
	config
	op                Op
	typ               string
	id                *int
	clearedFields     map[string]struct{}
	employee          *int
	clearedemployee   bool
	contagious        *int
	clearedcontagious bool
	carrier           *int
	clearedcarrier    bool
	patient           *int
	clearedpatient    bool
	area              *int
	clearedarea       bool
	done              bool
	oldValue          func(context.Context) (*Statistic, error)
}

var _ ent.Mutation = (*StatisticMutation)(nil)

// statisticOption allows to manage the mutation configuration using functional options.
type statisticOption func(*StatisticMutation)

// newStatisticMutation creates new mutation for $n.Name.
func newStatisticMutation(c config, op Op, opts ...statisticOption) *StatisticMutation {
	m := &StatisticMutation{
		config:        c,
		op:            op,
		typ:           TypeStatistic,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStatisticID sets the id field of the mutation.
func withStatisticID(id int) statisticOption {
	return func(m *StatisticMutation) {
		var (
			err   error
			once  sync.Once
			value *Statistic
		)
		m.oldValue = func(ctx context.Context) (*Statistic, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Statistic.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStatistic sets the old Statistic of the mutation.
func withStatistic(node *Statistic) statisticOption {
	return func(m *StatisticMutation) {
		m.oldValue = func(context.Context) (*Statistic, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StatisticMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StatisticMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *StatisticMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetEmployeeID sets the employee edge to Employee by id.
func (m *StatisticMutation) SetEmployeeID(id int) {
	m.employee = &id
}

// ClearEmployee clears the employee edge to Employee.
func (m *StatisticMutation) ClearEmployee() {
	m.clearedemployee = true
}

// EmployeeCleared returns if the edge employee was cleared.
func (m *StatisticMutation) EmployeeCleared() bool {
	return m.clearedemployee
}

// EmployeeID returns the employee id in the mutation.
func (m *StatisticMutation) EmployeeID() (id int, exists bool) {
	if m.employee != nil {
		return *m.employee, true
	}
	return
}

// EmployeeIDs returns the employee ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// EmployeeID instead. It exists only for internal usage by the builders.
func (m *StatisticMutation) EmployeeIDs() (ids []int) {
	if id := m.employee; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEmployee reset all changes of the "employee" edge.
func (m *StatisticMutation) ResetEmployee() {
	m.employee = nil
	m.clearedemployee = false
}

// SetContagiousID sets the contagious edge to Contagious by id.
func (m *StatisticMutation) SetContagiousID(id int) {
	m.contagious = &id
}

// ClearContagious clears the contagious edge to Contagious.
func (m *StatisticMutation) ClearContagious() {
	m.clearedcontagious = true
}

// ContagiousCleared returns if the edge contagious was cleared.
func (m *StatisticMutation) ContagiousCleared() bool {
	return m.clearedcontagious
}

// ContagiousID returns the contagious id in the mutation.
func (m *StatisticMutation) ContagiousID() (id int, exists bool) {
	if m.contagious != nil {
		return *m.contagious, true
	}
	return
}

// ContagiousIDs returns the contagious ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// ContagiousID instead. It exists only for internal usage by the builders.
func (m *StatisticMutation) ContagiousIDs() (ids []int) {
	if id := m.contagious; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetContagious reset all changes of the "contagious" edge.
func (m *StatisticMutation) ResetContagious() {
	m.contagious = nil
	m.clearedcontagious = false
}

// SetCarrierID sets the carrier edge to Carrier by id.
func (m *StatisticMutation) SetCarrierID(id int) {
	m.carrier = &id
}

// ClearCarrier clears the carrier edge to Carrier.
func (m *StatisticMutation) ClearCarrier() {
	m.clearedcarrier = true
}

// CarrierCleared returns if the edge carrier was cleared.
func (m *StatisticMutation) CarrierCleared() bool {
	return m.clearedcarrier
}

// CarrierID returns the carrier id in the mutation.
func (m *StatisticMutation) CarrierID() (id int, exists bool) {
	if m.carrier != nil {
		return *m.carrier, true
	}
	return
}

// CarrierIDs returns the carrier ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// CarrierID instead. It exists only for internal usage by the builders.
func (m *StatisticMutation) CarrierIDs() (ids []int) {
	if id := m.carrier; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCarrier reset all changes of the "carrier" edge.
func (m *StatisticMutation) ResetCarrier() {
	m.carrier = nil
	m.clearedcarrier = false
}

// SetPatientID sets the patient edge to Patient by id.
func (m *StatisticMutation) SetPatientID(id int) {
	m.patient = &id
}

// ClearPatient clears the patient edge to Patient.
func (m *StatisticMutation) ClearPatient() {
	m.clearedpatient = true
}

// PatientCleared returns if the edge patient was cleared.
func (m *StatisticMutation) PatientCleared() bool {
	return m.clearedpatient
}

// PatientID returns the patient id in the mutation.
func (m *StatisticMutation) PatientID() (id int, exists bool) {
	if m.patient != nil {
		return *m.patient, true
	}
	return
}

// PatientIDs returns the patient ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// PatientID instead. It exists only for internal usage by the builders.
func (m *StatisticMutation) PatientIDs() (ids []int) {
	if id := m.patient; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPatient reset all changes of the "patient" edge.
func (m *StatisticMutation) ResetPatient() {
	m.patient = nil
	m.clearedpatient = false
}

// SetAreaID sets the area edge to Area by id.
func (m *StatisticMutation) SetAreaID(id int) {
	m.area = &id
}

// ClearArea clears the area edge to Area.
func (m *StatisticMutation) ClearArea() {
	m.clearedarea = true
}

// AreaCleared returns if the edge area was cleared.
func (m *StatisticMutation) AreaCleared() bool {
	return m.clearedarea
}

// AreaID returns the area id in the mutation.
func (m *StatisticMutation) AreaID() (id int, exists bool) {
	if m.area != nil {
		return *m.area, true
	}
	return
}

// AreaIDs returns the area ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// AreaID instead. It exists only for internal usage by the builders.
func (m *StatisticMutation) AreaIDs() (ids []int) {
	if id := m.area; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetArea reset all changes of the "area" edge.
func (m *StatisticMutation) ResetArea() {
	m.area = nil
	m.clearedarea = false
}

// Op returns the operation name.
func (m *StatisticMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Statistic).
func (m *StatisticMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *StatisticMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *StatisticMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *StatisticMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown Statistic field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *StatisticMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Statistic field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *StatisticMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *StatisticMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *StatisticMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown Statistic numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *StatisticMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *StatisticMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *StatisticMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Statistic nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *StatisticMutation) ResetField(name string) error {
	return fmt.Errorf("unknown Statistic field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *StatisticMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.employee != nil {
		edges = append(edges, statistic.EdgeEmployee)
	}
	if m.contagious != nil {
		edges = append(edges, statistic.EdgeContagious)
	}
	if m.carrier != nil {
		edges = append(edges, statistic.EdgeCarrier)
	}
	if m.patient != nil {
		edges = append(edges, statistic.EdgePatient)
	}
	if m.area != nil {
		edges = append(edges, statistic.EdgeArea)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *StatisticMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case statistic.EdgeEmployee:
		if id := m.employee; id != nil {
			return []ent.Value{*id}
		}
	case statistic.EdgeContagious:
		if id := m.contagious; id != nil {
			return []ent.Value{*id}
		}
	case statistic.EdgeCarrier:
		if id := m.carrier; id != nil {
			return []ent.Value{*id}
		}
	case statistic.EdgePatient:
		if id := m.patient; id != nil {
			return []ent.Value{*id}
		}
	case statistic.EdgeArea:
		if id := m.area; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *StatisticMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *StatisticMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *StatisticMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.clearedemployee {
		edges = append(edges, statistic.EdgeEmployee)
	}
	if m.clearedcontagious {
		edges = append(edges, statistic.EdgeContagious)
	}
	if m.clearedcarrier {
		edges = append(edges, statistic.EdgeCarrier)
	}
	if m.clearedpatient {
		edges = append(edges, statistic.EdgePatient)
	}
	if m.clearedarea {
		edges = append(edges, statistic.EdgeArea)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *StatisticMutation) EdgeCleared(name string) bool {
	switch name {
	case statistic.EdgeEmployee:
		return m.clearedemployee
	case statistic.EdgeContagious:
		return m.clearedcontagious
	case statistic.EdgeCarrier:
		return m.clearedcarrier
	case statistic.EdgePatient:
		return m.clearedpatient
	case statistic.EdgeArea:
		return m.clearedarea
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *StatisticMutation) ClearEdge(name string) error {
	switch name {
	case statistic.EdgeEmployee:
		m.ClearEmployee()
		return nil
	case statistic.EdgeContagious:
		m.ClearContagious()
		return nil
	case statistic.EdgeCarrier:
		m.ClearCarrier()
		return nil
	case statistic.EdgePatient:
		m.ClearPatient()
		return nil
	case statistic.EdgeArea:
		m.ClearArea()
		return nil
	}
	return fmt.Errorf("unknown Statistic unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *StatisticMutation) ResetEdge(name string) error {
	switch name {
	case statistic.EdgeEmployee:
		m.ResetEmployee()
		return nil
	case statistic.EdgeContagious:
		m.ResetContagious()
		return nil
	case statistic.EdgeCarrier:
		m.ResetCarrier()
		return nil
	case statistic.EdgePatient:
		m.ResetPatient()
		return nil
	case statistic.EdgeArea:
		m.ResetArea()
		return nil
	}
	return fmt.Errorf("unknown Statistic edge %s", name)
}
