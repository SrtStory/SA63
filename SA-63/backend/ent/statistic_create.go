// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/SrtStory/app/ent/area"
	"github.com/SrtStory/app/ent/carrier"
	"github.com/SrtStory/app/ent/contagious"
	"github.com/SrtStory/app/ent/employee"
	"github.com/SrtStory/app/ent/patient"
	"github.com/SrtStory/app/ent/statistic"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// StatisticCreate is the builder for creating a Statistic entity.
type StatisticCreate struct {
	config
	mutation *StatisticMutation
	hooks    []Hook
}

// SetEmployeeID sets the employee edge to Employee by id.
func (sc *StatisticCreate) SetEmployeeID(id int) *StatisticCreate {
	sc.mutation.SetEmployeeID(id)
	return sc
}

// SetNillableEmployeeID sets the employee edge to Employee by id if the given value is not nil.
func (sc *StatisticCreate) SetNillableEmployeeID(id *int) *StatisticCreate {
	if id != nil {
		sc = sc.SetEmployeeID(*id)
	}
	return sc
}

// SetEmployee sets the employee edge to Employee.
func (sc *StatisticCreate) SetEmployee(e *Employee) *StatisticCreate {
	return sc.SetEmployeeID(e.ID)
}

// SetContagiousID sets the contagious edge to Contagious by id.
func (sc *StatisticCreate) SetContagiousID(id int) *StatisticCreate {
	sc.mutation.SetContagiousID(id)
	return sc
}

// SetNillableContagiousID sets the contagious edge to Contagious by id if the given value is not nil.
func (sc *StatisticCreate) SetNillableContagiousID(id *int) *StatisticCreate {
	if id != nil {
		sc = sc.SetContagiousID(*id)
	}
	return sc
}

// SetContagious sets the contagious edge to Contagious.
func (sc *StatisticCreate) SetContagious(c *Contagious) *StatisticCreate {
	return sc.SetContagiousID(c.ID)
}

// SetCarrierID sets the carrier edge to Carrier by id.
func (sc *StatisticCreate) SetCarrierID(id int) *StatisticCreate {
	sc.mutation.SetCarrierID(id)
	return sc
}

// SetNillableCarrierID sets the carrier edge to Carrier by id if the given value is not nil.
func (sc *StatisticCreate) SetNillableCarrierID(id *int) *StatisticCreate {
	if id != nil {
		sc = sc.SetCarrierID(*id)
	}
	return sc
}

// SetCarrier sets the carrier edge to Carrier.
func (sc *StatisticCreate) SetCarrier(c *Carrier) *StatisticCreate {
	return sc.SetCarrierID(c.ID)
}

// SetPatientID sets the patient edge to Patient by id.
func (sc *StatisticCreate) SetPatientID(id int) *StatisticCreate {
	sc.mutation.SetPatientID(id)
	return sc
}

// SetNillablePatientID sets the patient edge to Patient by id if the given value is not nil.
func (sc *StatisticCreate) SetNillablePatientID(id *int) *StatisticCreate {
	if id != nil {
		sc = sc.SetPatientID(*id)
	}
	return sc
}

// SetPatient sets the patient edge to Patient.
func (sc *StatisticCreate) SetPatient(p *Patient) *StatisticCreate {
	return sc.SetPatientID(p.ID)
}

// SetAreaID sets the area edge to Area by id.
func (sc *StatisticCreate) SetAreaID(id int) *StatisticCreate {
	sc.mutation.SetAreaID(id)
	return sc
}

// SetNillableAreaID sets the area edge to Area by id if the given value is not nil.
func (sc *StatisticCreate) SetNillableAreaID(id *int) *StatisticCreate {
	if id != nil {
		sc = sc.SetAreaID(*id)
	}
	return sc
}

// SetArea sets the area edge to Area.
func (sc *StatisticCreate) SetArea(a *Area) *StatisticCreate {
	return sc.SetAreaID(a.ID)
}

// Mutation returns the StatisticMutation object of the builder.
func (sc *StatisticCreate) Mutation() *StatisticMutation {
	return sc.mutation
}

// Save creates the Statistic in the database.
func (sc *StatisticCreate) Save(ctx context.Context) (*Statistic, error) {
	var (
		err  error
		node *Statistic
	)
	if len(sc.hooks) == 0 {
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StatisticMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sc.mutation = mutation
			node, err = sc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *StatisticCreate) SaveX(ctx context.Context) *Statistic {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sc *StatisticCreate) sqlSave(ctx context.Context) (*Statistic, error) {
	s, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	s.ID = int(id)
	return s, nil
}

func (sc *StatisticCreate) createSpec() (*Statistic, *sqlgraph.CreateSpec) {
	var (
		s     = &Statistic{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: statistic.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: statistic.FieldID,
			},
		}
	)
	if nodes := sc.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   statistic.EmployeeTable,
			Columns: []string{statistic.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ContagiousIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   statistic.ContagiousTable,
			Columns: []string{statistic.ContagiousColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: contagious.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.CarrierIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   statistic.CarrierTable,
			Columns: []string{statistic.CarrierColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: carrier.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   statistic.PatientTable,
			Columns: []string{statistic.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.AreaIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   statistic.AreaTable,
			Columns: []string{statistic.AreaColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: area.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return s, _spec
}
